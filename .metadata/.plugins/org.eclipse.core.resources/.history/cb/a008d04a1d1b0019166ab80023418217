package com.qincan.controller;

import java.util.UUID;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.fasterxml.jackson.databind.util.BeanUtil;
import com.qincan.controller.BasicController;
import com.qincan.pojo.Users;
import com.qincan.pojo.vo.UsersVO;
import com.qincan.service.UserService;
import com.qincan.utils.IMoocJSONResult;
import com.qincan.utils.MD5Utils;
import com.qincan.utils.RedisOperator;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;

@RestController
@Api(value="用户注册登录的接口", tags= {"注册和登录的controller"})
public class RegistLoginController extends BasicController {
	@Autowired
	private UserService userService;
	@Autowired
	public RedisOperator redis;
	
	@RequestMapping("/hello")
	public String hello(){
		return "hello";
	}
	@ApiOperation(value="用户注册", notes="用户注册的接口")
	@PostMapping("/regist")
	@ResponseBody
	public IMoocJSONResult regist(@RequestBody Users user){
		//判断用户名和密码是否为空
		if(StringUtils.isBlank(user.getUsername()) || StringUtils.isBlank(user.getPassword())){
			//为空
			return IMoocJSONResult.errorMsg("用户名或密码不嫩为空"); 
		}
		//判断用户名是否存在
		boolean usernameIsExist = userService.queryUsernameIsExist(user.getUsername());
		if (usernameIsExist) {
			return IMoocJSONResult.errorMsg("用户名已经存在，请换一个用户名");
		}else{
			//保存用户
			user.setNickname(user.getUsername());
			try {
				user.setPassword(MD5Utils.getMD5Str(user.getPassword()));
				user.setFansCounts(0);
				user.setReceiveLikeCounts(0);
				user.setFollowCounts(0);
			} catch (Exception e) {
				e.printStackTrace();
			}
			userService.saveUser(user);
		}
		//确保密码安全
		user.setPassword("");
		UsersVO userVO = setUserRedisSessionToken(user);
		return IMoocJSONResult.ok(userVO);
	}
	
	@ApiOperation(value="用户登录", notes="用户登录的接口")
	@PostMapping("/login")
	public IMoocJSONResult login(@RequestBody Users user) throws Exception{
		String username = user.getUsername();
		String password = user.getPassword();
		//判断用户名和密码是否为空
		if(username.equals("") || password.equals("")){
			return IMoocJSONResult.ok("用户名或者密码不能为空，请输入...");
		}
		//判断用户是否存在
		Users userResult = userService.queryUserForLogin(username,MD5Utils.getMD5Str(password));
		
		//返回
		if(userResult != null){
			userResult.setPassword("");
			UsersVO usersVO = setUserRedisSessionToken(userResult);
			return IMoocJSONResult.ok(usersVO);
		}else{
			return IMoocJSONResult.errorMsg("用户名或者密码不正确");
		}
		
	}
	
	@ApiOperation(value="用户註銷", notes="用户註銷的接口")
	@ApiImplicitParam(name="userId", value="用户id", required=true, 
	dataType="String", paramType="query")
	@PostMapping("/logout")
	public IMoocJSONResult logout(String userid) throws Exception{

		return IMoocJSONResult.ok("用户名或者密码不能为空，请输入...");
		
		
	}
	
	
	//userVo的生成(設置一個sessionToken)
	public UsersVO setUserRedisSessionToken(Users user){
		String token = UUID.randomUUID().toString();
		redis.set(USER_REDIS_SESSION + ":" + user.getId(), token, 1000 * 60 * 30);
		UsersVO usersVO = new UsersVO();
		BeanUtils.copyProperties(user, usersVO);
		usersVO.setUserToken(token);
		
		return usersVO;
	}
}
